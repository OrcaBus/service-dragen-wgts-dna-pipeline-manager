{
  "Comment": "A description of my state machine",
  "StartAt": "Convert ICAv2 WES event to WRSC Event",
  "States": {
    "Convert ICAv2 WES event to WRSC Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": {
        "workflowRunStateChangeEvent": "{% $states.result.Payload.workflowRunStateChangeEvent %}"
      },
      "Arguments": {
        "FunctionName": "${__convert_icav2_wes_state_change_event_to_wrsc_event_lambda_function_arn__}",
        "Payload": {
          "icav2WesStateChangeEvent": "{% $states.input %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "New WFM has been deployed"
    },
    "New WFM has been deployed": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Push WRSC Event",
          "Condition": "{% /* ${__new_workflow_manager_is_deployed__} */ false %}",
          "Comment": "New WFM Has Been Deployed"
        }
      ],
      "Default": "Push WRSC Event (legacy)"
    },
    "Push WRSC Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $states.input.workflowRunStateChangeEvent %}",
            "DetailType": "${__workflow_run_state_change_event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__stack_source__}"
          }
        ]
      },
      "End": true
    },
    "Push WRSC Event (legacy)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $states.input.workflowRunStateChangeEvent ~>\n/* Renamed libraries to linkedLibraries using the transform method */\n| $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n/* Renamed workflowName and workflowVersion using the transform method */\n| $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | %}",
            "DetailType": "${__workflow_run_state_change_event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__stack_source__}"
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
